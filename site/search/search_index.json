{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DeepExpressions: A Deep Learning tookit for Facial Expressions Recognition About DeepExpressions is ... Installation Before installing DeepExpression, please install Tensorflow 2.0 . We recommend the GPU version. Install DeepExpressions from PyPI (recommend): pip install DeepExpressions License MIT License Copyright (c) 2019 DeepExpressions Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Home"},{"location":"#about","text":"DeepExpressions is ...","title":"About"},{"location":"#installation","text":"Before installing DeepExpression, please install Tensorflow 2.0 . We recommend the GPU version. Install DeepExpressions from PyPI (recommend): pip install DeepExpressions","title":"Installation"},{"location":"#license","text":"MIT License Copyright (c) 2019 DeepExpressions Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"face_detector/","text":"FaceDetector FaceDetector is build on top of OpenCV dnn module which is based on the Single Shot Detector (SSD) framework with a ResNet base network. DeepExpressions.FaceDetector() Usage: from matplotlib import pyplot as plt from DeepExpressions import FaceDetector # Load image image = plt.imread(\"my-image.jpg\") # Create FaceDetector object face_detector = FaceDetector() # Compute faces locations in the image bb_list = face_detector(image, size=(300,300), threshold=0.5) # --> bb_list = [[x0, y0, x1, y1], [...]] Arguments: Returns:","title":"FaceDetector"},{"location":"model/","text":"Model DeepExpressions.Model is an instance to predict the facials expressions within an image based on trained classifiers available at DeepExpressions-models . Arguments: model_name: Name of the model. custom_model: Path to custom model saved (only *.h5 files). from DeepExpressions import Model model = Model(model_name, custom_model=None) Model Methods predict: Predicts facial expressions from input data. Arguments: input_data: Images to predict. It can be np.ndarray, tf.Tensor or a list of the previous types. labeled_output: Returns predictions with names rather than one-hot-encoded. model.predict(input_data, labeled_output=True) # [Happy, Surprise, ...] summary: Prints a summary representation of the model loaded. model.summary() # Model: \"ce-xception-512-256\" # _________________________________________________________________ # Layer (type) Output Shape Param # # ================================================================= # xception (Model) (None, 4, 4, 2048) 20861480 # _________________________________________________________________ # global_average_pooling2d_1 ( (None, 2048) 0 # _________________________________________________________________ # dense_3 (Dense) (None, 512) 1049088 # _________________________________________________________________ # dense_4 (Dense) (None, 256) 131328 # _________________________________________________________________ # dense_5 (Dense) (None, 7) 1799 # ================================================================= # Total params: 22,043,695 # Trainable params: 10,660,559 # Non-trainable params: 11,383,136 # _________________________________________________________________ train_info: Prints some training information about the model loaded. model.train_info() # Model: \"ce-xception-512-256\" # ________________________________________________________________________________ # Parameter Value # ================================================================================ # ConvNet Xception # Dataset Compound Facial Expressions Database # NN-Layers [512, 256] # ________________________________________________________________________________ # Optimizer Adam # Learning rate 1e-3 # Epochs 30 # Epochs (fn) 15 # ConvNet layers (fn) 100+ # ================================================================================ # * fn = fine-tunning # ================================================================================ # https://github.com/deepexpressions/models/tree/master/models/ce-xception-512-256 # ================================================================================","title":"Model"},{"location":"train_utils/DataLoader/","text":"DataLoader ... Arguments: data_root: image_size: batch_size: data_augm: steps_per_epoch: cache:","title":"DataLoader"},{"location":"train_utils/data_augmentation/","text":"Data Augmentation Package with data augmentation techiniques to apply to the dataset. Pass them as a list to the argument data_augm in the DataLoader() class. Follow the example below: from DeepExpressions.train_utils import DataLoader, data_augmentation as daug daug_list = [ daug.flip_left_right, daug.flip_up_down, daug.random_brightness, daug.random_contrast, daug.random_hue, daug.random_jpeg_quality, daug.random_rotation, daug.random_saturation, daug.random_shear, daug.random_zoom ] dataset = DataLoader(data_root=\"...\", data_augm=daug_list) flip_left_right Flip an image horizontally (left to right). DeepExpressions.train_utils.flip_left_right(image, label: tuple) This image by Nikita is licensed under CC-BY 2.0 flip_up_down Flip an image vertically (upside down). DeepExpressions.train_utils.flip_up_down(image, label: tuple) This image by Nikita is licensed under CC-BY 2.0 random_brightness Adjust the brightness of images by a random factor. DeepExpressions.train_utils.random_brightness(image, label: tuple, max_delta=0.5) max_delta: Amount to add to the pixel values. This image by Nikita is licensed under CC-BY 2.0 random_contrast Adjust the contrast of an image or images by a random factor. DeepExpressions.train_utils.random_contrast(image, label: tuple, lower=0.5, upper=2.5) lower: Lower bound for the random contrast factor. upper: Upper bound for the random contrast factor. This image by Nikita is licensed under CC-BY 2.0 random_hue Adjust the hue of RGB images by a random factor. DeepExpressions.train_utils.random_hue(image, label: tuple, max_delta=0.5) max_delta: Maximum value for the random delta. This image by Nikita is licensed under CC-BY 2.0 random_jpeg_quality Randomly changes jpeg encoding quality for inducing jpeg noise. DeepExpressions.train_utils.random_jpeg_quality(image, label: tuple, min_jpeg_quality=5, max_jpeg_quality=25) min_jpeg_quality: Minimum jpeg encoding quality to use. max_jpeg_quality: Maximum jpeg encoding quality to use. This image by Nikita is licensed under CC-BY 2.0 random_rotation Performs a random rotation of a image. DeepExpressions.train_utils.random_rotation(image, label: tuple, angle=45) angle: Rotation range, in degrees. This image by Nikita is licensed under CC-BY 2.0 random_saturation Adjust the saturation of RGB images by a random factor. DeepExpressions.train_utils.random_saturation(image, label: tuple, lower=0, upper=5) lower: Lower bound for the random saturation factor. upper: Upper bound for the random saturation factor. This image by Nikita is licensed under CC-BY 2.0 random_shear Performs a random spatial shear of a image. DeepExpressions.train_utils.random_shear(image, label: tuple, intensity=45) intensity: Transformation intensity in degrees. This image by Nikita is licensed under CC-BY 2.0 random_zoom Performs a random spatial zoom of a image. DeepExpressions.train_utils.random_zoom(image, label: tuple, zoom_range=(0.6, 0.6)) zoom_range: Zoom range for width and height. This image by Nikita is licensed under CC-BY 2.0","title":"data_augmentation"},{"location":"train_utils/data_augmentation/#flip_left_right","text":"Flip an image horizontally (left to right). DeepExpressions.train_utils.flip_left_right(image, label: tuple) This image by Nikita is licensed under CC-BY 2.0","title":"flip_left_right"},{"location":"train_utils/data_augmentation/#flip_up_down","text":"Flip an image vertically (upside down). DeepExpressions.train_utils.flip_up_down(image, label: tuple) This image by Nikita is licensed under CC-BY 2.0","title":"flip_up_down"},{"location":"train_utils/data_augmentation/#random_brightness","text":"Adjust the brightness of images by a random factor. DeepExpressions.train_utils.random_brightness(image, label: tuple, max_delta=0.5) max_delta: Amount to add to the pixel values. This image by Nikita is licensed under CC-BY 2.0","title":"random_brightness"},{"location":"train_utils/data_augmentation/#random_contrast","text":"Adjust the contrast of an image or images by a random factor. DeepExpressions.train_utils.random_contrast(image, label: tuple, lower=0.5, upper=2.5) lower: Lower bound for the random contrast factor. upper: Upper bound for the random contrast factor. This image by Nikita is licensed under CC-BY 2.0","title":"random_contrast"},{"location":"train_utils/data_augmentation/#random_hue","text":"Adjust the hue of RGB images by a random factor. DeepExpressions.train_utils.random_hue(image, label: tuple, max_delta=0.5) max_delta: Maximum value for the random delta. This image by Nikita is licensed under CC-BY 2.0","title":"random_hue"},{"location":"train_utils/data_augmentation/#random_jpeg_quality","text":"Randomly changes jpeg encoding quality for inducing jpeg noise. DeepExpressions.train_utils.random_jpeg_quality(image, label: tuple, min_jpeg_quality=5, max_jpeg_quality=25) min_jpeg_quality: Minimum jpeg encoding quality to use. max_jpeg_quality: Maximum jpeg encoding quality to use. This image by Nikita is licensed under CC-BY 2.0","title":"random_jpeg_quality"},{"location":"train_utils/data_augmentation/#random_rotation","text":"Performs a random rotation of a image. DeepExpressions.train_utils.random_rotation(image, label: tuple, angle=45) angle: Rotation range, in degrees. This image by Nikita is licensed under CC-BY 2.0","title":"random_rotation"},{"location":"train_utils/data_augmentation/#random_saturation","text":"Adjust the saturation of RGB images by a random factor. DeepExpressions.train_utils.random_saturation(image, label: tuple, lower=0, upper=5) lower: Lower bound for the random saturation factor. upper: Upper bound for the random saturation factor. This image by Nikita is licensed under CC-BY 2.0","title":"random_saturation"},{"location":"train_utils/data_augmentation/#random_shear","text":"Performs a random spatial shear of a image. DeepExpressions.train_utils.random_shear(image, label: tuple, intensity=45) intensity: Transformation intensity in degrees. This image by Nikita is licensed under CC-BY 2.0","title":"random_shear"},{"location":"train_utils/data_augmentation/#random_zoom","text":"Performs a random spatial zoom of a image. DeepExpressions.train_utils.random_zoom(image, label: tuple, zoom_range=(0.6, 0.6)) zoom_range: Zoom range for width and height. This image by Nikita is licensed under CC-BY 2.0","title":"random_zoom"},{"location":"wrapper/ImageDetector/","text":"ImageDetector Under development!","title":"ImageDetector"},{"location":"wrapper/VideoDetector/","text":"VideoDetector Under development!","title":"VideoDetector"}]}